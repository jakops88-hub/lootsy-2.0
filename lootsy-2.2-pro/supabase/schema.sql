-- Enable UUID extension if needed
create extension if not exists "uuid-ossp";

-- Profiles (linked to auth.users)
create table if not exists public.profiles (
  id uuid primary key references auth.users(id) on delete cascade,
  email text unique not null,
  role text not null default 'user', -- 'user' | 'admin'
  premium boolean not null default false,
  premium_expires_at timestamptz,
  created_at timestamptz not null default now()
);

-- Merchants
create table if not exists public.merchants (
  id uuid primary key default uuid_generate_v4(),
  name text not null,
  affiliate_domain text,
  created_at timestamptz not null default now()
);

-- Deals
create table if not exists public.deals (
  id uuid primary key default uuid_generate_v4(),
  title text not null,
  description text,
  price_current numeric(12,2) not null,
  price_before numeric(12,2),
  affiliate_url text not null,
  image_url text,
  stock_left int,
  expires_at timestamptz,
  is_active boolean not null default true,
  merchant_id uuid references public.merchants(id),
  created_at timestamptz not null default now()
);

-- Clicks
create table if not exists public.clicks (
  id bigint generated by default as identity primary key,
  deal_id uuid references public.deals(id) on delete cascade,
  user_id uuid references public.profiles(id),
  created_at timestamptz not null default now(),
  ua text,
  ip_hash text
);

-- Subscriptions
create table if not exists public.subscriptions (
  id uuid primary key default uuid_generate_v4(),
  user_id uuid references public.profiles(id) on delete cascade,
  status text not null default 'inactive', -- active | inactive | past_due
  current_period_end timestamptz,
  created_at timestamptz not null default now()
);

-- Minimal RLS
alter table public.deals enable row level security;
alter table public.merchants enable row level security;
alter table public.clicks enable row level security;
alter table public.profiles enable row level security;
alter table public.subscriptions enable row level security;

-- Read policies
create policy "Public can read active deals" on public.deals
for select using (is_active = true and (expires_at is null or expires_at > now()));

create policy "Public can read merchants" on public.merchants
for select using (true);

-- Profiles: users can read their own
create policy "Users can read own profile" on public.profiles
for select using (auth.uid() = id);

-- Insert/update by service role only (admin panel)
-- (No explicit policies; rely on service role key from server actions.)

-- Helper view for trending
create or replace view public.deals_trending as
select d.*,
  coalesce(c.clicks_24h, 0) as clicks_24h
from deals d
left join (
  select deal_id, count(*) as clicks_24h
  from clicks
  where created_at > now() - interval '24 hours'
  group by deal_id
) c on c.deal_id = d.id
where d.is_active = true and (d.expires_at is null or d.expires_at > now());
